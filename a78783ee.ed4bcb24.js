(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{144:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return l})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return p}));var r=t(3),a=t(7),o=(t(0),t(201)),i={id:"advanced-features",title:"Advanced usage"},l={unversionedId:"advanced-features",id:"version-1.0.0/advanced-features",isDocsHomePage:!1,title:"Advanced usage",description:"In this section we discuss how to use Infer if you wish to make contributions to",source:"@site/versioned_docs/version-1.0.0/01-advanced-features.md",slug:"/advanced-features",permalink:"/docs/advanced-features",version:"1.0.0",sidebar:"version-1.0.0/docs",previous:{title:"Recommended flow for CI",permalink:"/docs/steps-for-ci"},next:{title:"infer",permalink:"/docs/man-infer"}},c=[{value:"Structure of the results folder",id:"structure-of-the-results-folder",children:[{value:"Captured folder",id:"captured-folder",children:[]}]},{value:"Debug mode",id:"debug-mode",children:[]},{value:"Print the specs",id:"print-the-specs",children:[]},{value:"Run internal tests",id:"run-internal-tests",children:[]}],s={toc:c};function p(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"In this section we discuss how to use Infer if you wish to make contributions to\nit or just look under the hood to learn more about how it is working. There are,\nfor instance, debug options and ways to obtain the specs from the methods."),Object(o.b)("h2",{id:"structure-of-the-results-folder"},"Structure of the results folder"),Object(o.b)("p",null,"After a successful Infer run, a directory is created to store the results of the\nanalysis. By default this directory is called ",Object(o.b)("inlineCode",{parentName:"p"},"infer-out"),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"infer-out\n\u251c\u2500\u2500 captured/\n\u251c\u2500\u2500 log/\n\u251c\u2500\u2500 specs/\n\u251c\u2500\u2500 report.json\n\u251c\u2500\u2500 report.txt\n\u251c\u2500\u2500 toplevel.log\n\u2514\u2500\u2500 ...\n")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"captured/")," contains information for each file analyzed by Infer. See\n",Object(o.b)("a",{parentName:"li",href:"advanced-features#captured-folder"},"below")," for more information."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"specs/")," contains the ",Object(o.b)("a",{parentName:"li",href:"advanced-features#print-the-specs"},"specs")," of each\nfunction that was analyzed, as inferred by Infer."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"log/")," and toplevel.log contains logs"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"report.txt")," and ",Object(o.b)("inlineCode",{parentName:"li"},"report.json")," contain the Infer reports in text and JSON\nformats"),Object(o.b)("li",{parentName:"ul"},"there are other folders reserved for Infer's internal workings")),Object(o.b)("h3",{id:"captured-folder"},"Captured folder"),Object(o.b)("p",null,"Inside the folder ",Object(o.b)("inlineCode",{parentName:"p"},"infer-out/captured")," there is a folder for each captured file.\nAssume we captured a file called ",Object(o.b)("inlineCode",{parentName:"p"},"example.c"),". Then, Infer creates the following\nfiles inside the folder ",Object(o.b)("inlineCode",{parentName:"p"},"infer-out/captured/example.c/"),":"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"example.c.cfg")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"example.c.cg")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"example.c.tenv"))),Object(o.b)("p",null,"The files ",Object(o.b)("inlineCode",{parentName:"p"},".cfg"),", ",Object(o.b)("inlineCode",{parentName:"p"},".cg")," and ",Object(o.b)("inlineCode",{parentName:"p"},".tenv")," contain the intermediate representation of\nthat file. This data is passed to the backend of Infer, which then performs the\nanalysis. The files contain serialized OCaml data structures. The ",Object(o.b)("inlineCode",{parentName:"p"},".cfg")," file\ncontains a control flow graph for each function or method implemented in the\nfile. The file ",Object(o.b)("inlineCode",{parentName:"p"},".cg")," contains the call graph of the functions defined or called\nfrom that file. Finally, the file ",Object(o.b)("inlineCode",{parentName:"p"},".tenv")," contains all the types that are\ndefined or used in the file."),Object(o.b)("h2",{id:"debug-mode"},"Debug mode"),Object(o.b)("p",null,"With the debug option enabled ",Object(o.b)("inlineCode",{parentName:"p"},"infer run --debug -- <build command>"),", Infer\noutputs debug information in infer-out/log/. The option ",Object(o.b)("inlineCode",{parentName:"p"},"--stats")," provides only\nlight debug information, and ",Object(o.b)("inlineCode",{parentName:"p"},"--print-logs")," outputs every message on the console\nas well as in the log files."),Object(o.b)("p",null,"In each captured folder, we obtain the file ",Object(o.b)("inlineCode",{parentName:"p"},"icfg.dot"),", which is the graphical\nrepresentation of the file ",Object(o.b)("inlineCode",{parentName:"p"},".cfg")," and the file ",Object(o.b)("inlineCode",{parentName:"p"},"call_graph.dot"),", that is the\ngraphical representation of the call graph."),Object(o.b)("p",null,"Moreover, we obtain an HTML page for each captured file inside\n",Object(o.b)("inlineCode",{parentName:"p"},"infer-out/captured"),". This HTML file contains the source file. In each line of\nthe file there are links to the nodes of the control flow graph that correspond\nto that line of code. So one can see what the translation looks like. Moreover,\nwhen you click on those links you can see details of the symbolic execution of\nthat particular node."),Object(o.b)("h2",{id:"print-the-specs"},"Print the specs"),Object(o.b)("p",null,"It is also possible to print the specs created by Infer using the subcommand\n",Object(o.b)("inlineCode",{parentName:"p"},"infer report"),". You can print one particular spec that corresponds to one\nmethod, or you can print all the specs in the results directory. Let us look at\nan example:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-java"},"class Hello {\n    int x;\n    void setX(int newX) {\n        this.x = newX;\n    }\n}\n")),Object(o.b)("p",null,"We run Infer on this example with:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash"},"infer run -- javac Hello.java\n")),Object(o.b)("p",null,"Infer saves the spec for the method ",Object(o.b)("inlineCode",{parentName:"p"},"setX")," in ",Object(o.b)("inlineCode",{parentName:"p"},"infer-out/specs")," and we can print\nit with the command:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash"},"infer report infer-out/specs/Hello.setX{98B5}:void.specs\n")),Object(o.b)("p",null,"The convention for method names in Java is ",Object(o.b)("inlineCode",{parentName:"p"},"<class name>.<method name>"),". This\noutputs the following:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash"},"Procedure: void Hello.setX(int)\nvoid void Hello.setX(int)(class Hello *this, int newX)\nTimestamp: 1\nStatus: INACTIVE\nPhase: RE_EXECUTION\nDependency_map:\nTIME:0.006893 s TIMEOUT:N SYMOPS:34 CALLS:0,0\nERRORS:\n--------------------------- 1 of 1 [nvisited: 4 5 6] ---------------------------\nPRE:\nthis = val$1: ;\nnewX = val$3: ;\nthis|->{Hello.x:val$2}:\nPOST 1 of 1:\nthis = val$1: ;\nreturn = val$4: ;\nnewX = val$3: ;\nthis|->{Hello.x:newX}:\n----------------------------------------------------------------\n")),Object(o.b)("p",null,"which expresses the fact that ",Object(o.b)("inlineCode",{parentName:"p"},"this")," needs to be allocated at the beginning of\nthe method, and that at the end of the method the field ",Object(o.b)("inlineCode",{parentName:"p"},"x")," is equal to ",Object(o.b)("inlineCode",{parentName:"p"},"newX"),"."),Object(o.b)("p",null,"Moreover, you can print all the specs in the results directory with the command:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash"},"infer report\n")),Object(o.b)("h2",{id:"run-internal-tests"},"Run internal tests"),Object(o.b)("p",null,"There are many tests in the Infer code base that check that Infer behaves\ncorrectly on small program examples. This is how you'd typically run the tests;\nyou can adapt the figure ",Object(o.b)("inlineCode",{parentName:"p"},"8")," depending on the number of cores available on your\nmachine:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash"},"make -j8 test\n")))}p.isMDXComponent=!0},201:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return f}));var r=t(0),a=t.n(r);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=a.a.createContext({}),p=function(e){var n=a.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=p(e.components);return a.a.createElement(s.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},u=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=p(t),u=r,f=d["".concat(i,".").concat(u)]||d[u]||b[u]||o;return t?a.a.createElement(f,l(l({ref:n},s),{},{components:t})):a.a.createElement(f,l({ref:n},s))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=u;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);