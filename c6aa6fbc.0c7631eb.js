(window.webpackJsonp=window.webpackJsonp||[]).push([[125],{259:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return r})),t.d(n,"metadata",(function(){return l})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return b}));var a=t(2),i=t(9),o=(t(0),t(298)),r={id:"checkers-bug-types",title:"Checkers bug types"},l={id:"checkers-bug-types",isDocsHomePage:!1,title:"Checkers bug types",description:"Here is an overview of the types of bugs currently reported by Infer checkers.",source:"@site/docs/03-checker-bug-types.md",permalink:"/docs/next/checkers-bug-types",version:"next",latestVersionMainDocPermalink:"/docs/getting-started"},c=[{value:"Captured Strong Self",id:"captured-strong-self",children:[]},{value:"Checkers immutable cast",id:"checkers-immutable-cast",children:[]},{value:"Deadlock",id:"deadlock",children:[]},{value:"Dead store",id:"dead-store",children:[]},{value:"Empty vector access",id:"empty-vector-access",children:[]},{value:"Field should be nullable",id:"field-should-be-nullable",children:[]},{value:"Fragment retains view",id:"fragment-retains-view",children:[]},{value:"Interface not thread-safe",id:"interface-not-thread-safe",children:[]},{value:"Ivar not null checked",id:"ivar-not-null-checked",children:[]},{value:"Lock Consistency Violation",id:"lock-consistency-violation",children:[{value:"Fixing Lock Consistency Violation reports",id:"fixing-lock-consistency-violation-reports",children:[]}]},{value:"Mixed self weakSelf",id:"mixed-self-weakself",children:[]},{value:"Multiple weakSelf",id:"multiple-weakself",children:[]},{value:"Memory leak",id:"memory-leak",children:[{value:"Memory leak in C",id:"memory-leak-in-c",children:[]},{value:"Memory leak in Objective-C",id:"memory-leak-in-objective-c",children:[]}]},{value:"Null Dereference",id:"null-dereference",children:[{value:"Null dereference in C",id:"null-dereference-in-c",children:[]},{value:"Null dereference in Objective-C",id:"null-dereference-in-objective-c",children:[]},{value:"Null dereference in Java",id:"null-dereference-in-java",children:[]}]},{value:"Parameter not null checked",id:"parameter-not-null-checked",children:[]},{value:"Premature nil termination argument",id:"premature-nil-termination-argument",children:[]},{value:"Resource leak",id:"resource-leak",children:[{value:"Resource leak in C",id:"resource-leak-in-c",children:[]},{value:"Resource leak in Java",id:"resource-leak-in-java",children:[]},{value:"Basics and Standard Idiom",id:"basics-and-standard-idiom",children:[]},{value:"Nested_Allocations",id:"nested_allocations",children:[]},{value:"Allocation of JSonParser and Cursor resources",id:"allocation-of-jsonparser-and-cursor-resources",children:[]},{value:"Escaping resources and exceptions",id:"escaping-resources-and-exceptions",children:[]},{value:"Java 7&#39;s try-with-resources",id:"java-7s-try-with-resources",children:[]}]},{value:"Retain cycle",id:"retain-cycle",children:[]},{value:"Static initialization order fiasco",id:"static-initialization-order-fiasco",children:[]},{value:"Thread-safety violation",id:"thread-safety-violation",children:[{value:"Thread-safety: What is a data race",id:"thread-safety-what-is-a-data-race",children:[]},{value:"Thread-safety: Potential fixes",id:"thread-safety-potential-fixes",children:[]},{value:"Thread-safety: Conditions checked before reporting",id:"thread-safety-conditions-checked-before-reporting",children:[]},{value:"Thread-safety: Thread annotations recognized by RacerD",id:"thread-safety-thread-annotations-recognized-by-racerd",children:[]},{value:"Thread-safety: Other annotations and what they do",id:"thread-safety-other-annotations-and-what-they-do",children:[]}]},{value:"UI Thread Starvation",id:"ui-thread-starvation",children:[]},{value:"Strict mode violation",id:"strict-mode-violation",children:[]},{value:"StrongSelf Not Checked",id:"strongself-not-checked",children:[]},{value:"Unsafe GuardedBy Access",id:"unsafe-guardedby-access",children:[]},{value:"weakSelf In NOESCAPE Block",id:"weakself-in-noescape-block",children:[]}],s={rightToc:c};function b(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Here is an overview of the types of bugs currently reported by Infer checkers."),Object(o.b)("h2",{id:"captured-strong-self"},"Captured Strong Self"),Object(o.b)("p",null,"This will happen in one of two cases generally:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"One uses ",Object(o.b)("inlineCode",{parentName:"li"},"weakSelf")," but forgot to declare it weak first."),Object(o.b)("li",{parentName:"ol"},"One is using ",Object(o.b)("inlineCode",{parentName:"li"},"strongSelf"),", declared in a block, in another (inside) block.\nThis changes the delicate balance of the ",Object(o.b)("inlineCode",{parentName:"li"},"weakSelf"),"/",Object(o.b)("inlineCode",{parentName:"li"},"strongSelf")," use in the\nfirst block. The retain cycle is avoided there because ",Object(o.b)("inlineCode",{parentName:"li"},"strongSelf")," is a\nlocal variable to the block. If ",Object(o.b)("inlineCode",{parentName:"li"},"strongSelf")," is used in the inside block,\nthen it's not a local variable anymore, but a captured variable.")),Object(o.b)("h2",{id:"checkers-immutable-cast"},"Checkers immutable cast"),Object(o.b)("p",null,"This error type is reported in Java. It fires when an immutable collection is\nreturned from a method whose type is mutable."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"  public List<String> getSomeList() {\n    ImmutableList<String> l = foo(...);\n    return l;\n  }\n")),Object(o.b)("p",null,"This can lead to a runtime error if users of ",Object(o.b)("inlineCode",{parentName:"p"},"getSomeList")," try to modify the\nlist e.g. by adding elements."),Object(o.b)("p",null,"Action: you can change the return type to be immutable, or make a copy of the\ncollection so that it can be modified."),Object(o.b)("h2",{id:"deadlock"},"Deadlock"),Object(o.b)("p",null,"This error is currently reported in Java. A deadlock occurs when two distinct\nthreads try to acquire two locks in reverse orders. The following code\nillustrates a textbook example. Of course, in real deadlocks, the lock\nacquisitions may be separated by deeply nested call chains."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"  public void lockAThenB() {\n    synchronized(lockA) {\n      synchronized(lockB) {\n       // do something with both resources\n      }\n    }\n  }\n\n  public void lockBThenA() {\n    synchronized(lockB) {\n      synchronized(lockA) {\n       // do something with both resources\n      }\n    }\n  }\n")),Object(o.b)("p",null,"The standard solution to a deadlock is to fix an order of lock acquisition and\nadhere to that order in all cases. Another solution may be to shrink the\ncritical sections (i.e., the code executing under lock) to the minimum required."),Object(o.b)("p",null,"Old-style containers such as ",Object(o.b)("inlineCode",{parentName:"p"},"Vector")," are synchronized on the object monitor,\nwhich means that deadlocks can occur even without explicit synchronisation on\nboth threads. For instance:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"  public void lockAThenAddToVector() {\n    synchronized(lockA) {\n      vector.add(object);\n    }\n  }\n\n  public void lockVectorThenA() {\n    synchronized(vector) {\n      synchronized(lockA) {\n       // do something with both resources\n      }\n    }\n  }\n")),Object(o.b)("p",null,"Infer has support for detecting these deadlocks too."),Object(o.b)("p",null,"To suppress reports of deadlocks in a method ",Object(o.b)("inlineCode",{parentName:"p"},"m()")," use the\n",Object(o.b)("inlineCode",{parentName:"p"},'@SuppressLint("DEADLOCK")')," annotation, as follows:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'  import android.annotation.SuppressLint;\n\n  @SuppressLint("DEADLOCK")\n  public void m() {\n  ...\n  }\n')),Object(o.b)("h2",{id:"dead-store"},"Dead store"),Object(o.b)("p",null,"This error is reported in C++. It fires when the value assigned to a variables\nis never used (e.g., ",Object(o.b)("inlineCode",{parentName:"p"},"int i = 1; i = 2; return i;"),")."),Object(o.b)("h2",{id:"empty-vector-access"},"Empty vector access"),Object(o.b)("p",null,"This error type is reported only in C++, in versions >= C++11."),Object(o.b)("p",null,"The code is trying to access an element of a vector that Infer believes to be\nempty. Such an access will cause undefined behavior at runtime."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-c++"}),"#include <vector>\nint foo(){\n  const std::vector<int> vec;\n  return vec[0]; // Empty vector access reported here\n}\n")),Object(o.b)("h2",{id:"field-should-be-nullable"},"Field should be nullable"),Object(o.b)("p",null,"This error type is reported in Java. It fires when a field is not marked\n",Object(o.b)("inlineCode",{parentName:"p"},"@Nullable"),", but it is"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Nullified in a method")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"  private List<String> idList;\n  public void reset() {\n    idList = null;\n    ...\n  }\n")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Or tested for ",Object(o.b)("inlineCode",{parentName:"li"},"null")," in a method")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"  private List<String> idList;\n  public void doSomethingWithIdList() {\n    if (idList == null) { ... }\n  }\n")),Object(o.b)("p",null,"Action:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"You may want to add ",Object(o.b)("inlineCode",{parentName:"li"},"@Nullable")," annotation in the field declaration. This will\ninform Infer that the field is intended to be set to ",Object(o.b)("inlineCode",{parentName:"li"},"null")," at some point. For\nsuch fields, Infer will emit a warning if you forget to check for ",Object(o.b)("inlineCode",{parentName:"li"},"null"),"\nbefore accessing them.")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"  import javax.annotation.Nullable;\n  ...\n  private @Nullable List<String> idList;\n  public void doSomethingWithIdList() {\n    int numIds = idList.size();  // Infer will complain that idList is not null-checked here\n    ...\n  }\n")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"If the field is never intended to be nullable, please refactor your codes so\nthat it will never be assigned or compared with ",Object(o.b)("inlineCode",{parentName:"li"},"null"),".")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"  private List<String> idList = new List<String>();\n  ...\n")),Object(o.b)("h2",{id:"fragment-retains-view"},"Fragment retains view"),Object(o.b)("p",null,"This error type is Android-specific. It fires when a ",Object(o.b)("inlineCode",{parentName:"p"},"Fragment")," type fails to\nnullify one or more of its declared ",Object(o.b)("inlineCode",{parentName:"p"},"View")," fields in ",Object(o.b)("inlineCode",{parentName:"p"},"onDestroyView"),". In\nperformance-sensitive applications, a ",Object(o.b)("inlineCode",{parentName:"p"},"Fragment")," should initialize all ",Object(o.b)("inlineCode",{parentName:"p"},"View"),"'s\nin ",Object(o.b)("inlineCode",{parentName:"p"},"onCreateView")," and nullify them in ",Object(o.b)("inlineCode",{parentName:"p"},"onDestroyView"),". If a ",Object(o.b)("inlineCode",{parentName:"p"},"Fragment")," is placed\non the back stack and fails to nullify a ",Object(o.b)("inlineCode",{parentName:"p"},"View")," in ",Object(o.b)("inlineCode",{parentName:"p"},"onDestroyView"),", it will\nretain a useless reference to that ",Object(o.b)("inlineCode",{parentName:"p"},"View")," that will not be cleaned up until the\n",Object(o.b)("inlineCode",{parentName:"p"},"Fragment")," is resumed or destroyed."),Object(o.b)("p",null,"Action: Nullify the ",Object(o.b)("inlineCode",{parentName:"p"},"View")," in question in ",Object(o.b)("inlineCode",{parentName:"p"},"onDestroyView"),"."),Object(o.b)("h2",{id:"interface-not-thread-safe"},"Interface not thread-safe"),Object(o.b)("p",null,"This error indicates that you have invoked an interface method not annotated\nwith ",Object(o.b)("inlineCode",{parentName:"p"},"@ThreadSafe")," from a thread-safe context (e.g., code that uses locks or is\nmarked ",Object(o.b)("inlineCode",{parentName:"p"},"@ThreadSafe"),"). The fix is to add the ",Object(o.b)("inlineCode",{parentName:"p"},"@ThreadSafe")," annotation to the\ninterface or to the interface method. For background on why these annotations\nare needed, see the detailed explanation\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"racerd#interface-not-thread-safe"}),"here"),"."),Object(o.b)("h2",{id:"ivar-not-null-checked"},"Ivar not null checked"),Object(o.b)("p",null,"This error type is only reported in Objective-C. This is similar to Null\ndereference, but Infer hasn't found a whole trace where the error can happen,\nbut only found that a null dereference can happen if an instance variable of a\nparameter is ",Object(o.b)("inlineCode",{parentName:"p"},"nil"),". For example:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-objectivec"}),"  -(int) foo {\n      B b* = [self->_a foo]; // sending a message with receiver nil returns nil\n      return b->x; // dereferencing b, potential NPE if you pass nil as the argument a.\n  }\n")),Object(o.b)("p",null,"Possible solutions are adding a check for ",Object(o.b)("inlineCode",{parentName:"p"},"nil"),", or making sure that the method\nis not called with ",Object(o.b)("inlineCode",{parentName:"p"},"nil"),"."),Object(o.b)("h2",{id:"lock-consistency-violation"},"Lock Consistency Violation"),Object(o.b)("p",null,"This is a C++ and Objective C error reported whenever:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"A class contains a member ",Object(o.b)("inlineCode",{parentName:"li"},"lock")," used for synchronization (most often a\n",Object(o.b)("inlineCode",{parentName:"li"},"std::mutex"),")."),Object(o.b)("li",{parentName:"ul"},"It has a public method which writes to some member ",Object(o.b)("inlineCode",{parentName:"li"},"x")," while holding ",Object(o.b)("inlineCode",{parentName:"li"},"lock"),"."),Object(o.b)("li",{parentName:"ul"},"It has a public method which reads ",Object(o.b)("inlineCode",{parentName:"li"},"x")," without holding ",Object(o.b)("inlineCode",{parentName:"li"},"lock"),".")),Object(o.b)("p",null,"The above may happen through a chain of calls. Above, ",Object(o.b)("inlineCode",{parentName:"p"},"x")," may also be a\ncontainer (an array, a vector, etc)."),Object(o.b)("h3",{id:"fixing-lock-consistency-violation-reports"},"Fixing Lock Consistency Violation reports"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Avoid the offending access (most often the read). Of course, this may not be\npossible."),Object(o.b)("li",{parentName:"ul"},"Use synchronization to protect the read, by using the same lock protecting the\ncorresponding write."),Object(o.b)("li",{parentName:"ul"},"Make the method doing the read access private. This should silence the\nwarning, since Infer looks for a pair of non-private methods. Objective-C:\nInfer considers a method as private if it's not exported in the header-file\ninterface.")),Object(o.b)("h2",{id:"mixed-self-weakself"},"Mixed self weakSelf"),Object(o.b)("p",null,"This happens when an Objective-C block captures both ",Object(o.b)("inlineCode",{parentName:"p"},"self")," and ",Object(o.b)("inlineCode",{parentName:"p"},"weakSelf"),", a\nweak pointer to ",Object(o.b)("inlineCode",{parentName:"p"},"self"),". Possibly the developer meant to capture only ",Object(o.b)("inlineCode",{parentName:"p"},"weakSelf"),"\nto avoid a retain cycle, but made a typo and used ",Object(o.b)("inlineCode",{parentName:"p"},"self")," as well in the block,\ninstead of ",Object(o.b)("inlineCode",{parentName:"p"},"strongSelf"),". In this case, this could cause a retain cycle."),Object(o.b)("h2",{id:"multiple-weakself"},"Multiple weakSelf"),Object(o.b)("p",null,"An Objective-C block uses ",Object(o.b)("inlineCode",{parentName:"p"},"weakSelf")," more than once. This could lead to\nunexpected behaviour. Even if ",Object(o.b)("inlineCode",{parentName:"p"},"weakSelf")," is not nil in the first use, it could\nbe nil in the following uses since the object that ",Object(o.b)("inlineCode",{parentName:"p"},"weakSelf")," points to could be\nfreed anytime. One should assign it to a strong pointer first, and then use it\nin the block."),Object(o.b)("h2",{id:"memory-leak"},"Memory leak"),Object(o.b)("h3",{id:"memory-leak-in-c"},"Memory leak in C"),Object(o.b)("p",null,"This error type is only reported in C and Objective-C code. In Java we do not\nreport memory leaks because it is a garbage collected language."),Object(o.b)("p",null,"In C, Infer reports memory leaks when objects are created with ",Object(o.b)("inlineCode",{parentName:"p"},"malloc")," and not\nfreed. For example:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-c"}),"-(void) memory_leak_bug {\n    struct Person *p = malloc(sizeof(struct Person));\n}\n")),Object(o.b)("h3",{id:"memory-leak-in-objective-c"},"Memory leak in Objective-C"),Object(o.b)("p",null,"Additionally, in Objective-C, Infer reports memory leaks that happen when\nobjects from Core Foundation or Core Graphics don't get released."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-objectivec"}),"-(void) memory_leak_bug_cf {\n    CGPathRef shadowPath = CGPathCreateWithRect(self.inputView.bounds, NULL); //object created and not released.\n}\n")),Object(o.b)("h2",{id:"null-dereference"},"Null Dereference"),Object(o.b)("p",null,"Infer reports null dereference bugs in C, Objective-C and Java. The issue is\nabout a pointer that can be ",Object(o.b)("inlineCode",{parentName:"p"},"null")," and it is dereferenced. This leads to a crash\nin all the above languages."),Object(o.b)("h3",{id:"null-dereference-in-c"},"Null dereference in C"),Object(o.b)("p",null,"Here is an example of an inter-procedural null dereference bug in C:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-c"}),"struct Person {\n  int age;\n  int height;\n  int weight;\n};\nint get_age(struct Person *who) {\n  return who->age;\n}\nint null_pointer_interproc() {\n  struct Person *joe = 0;\n  return get_age(joe);\n}\n")),Object(o.b)("h3",{id:"null-dereference-in-objective-c"},"Null dereference in Objective-C"),Object(o.b)("p",null,"In Objective-C, null dereferences are less common than in Java, but they still\nhappen and their cause can be hidden. In general, passing a message to nil does\nnot cause a crash and returns ",Object(o.b)("inlineCode",{parentName:"p"},"nil"),", but dereferencing a pointer directly does\ncause a crash as well as calling a ",Object(o.b)("inlineCode",{parentName:"p"},"nil")," block.C"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-objectivec"}),"-(void) foo:(void (^)())callback {\n    callback();\n}\n\n-(void) bar {\n    [self foo:nil]; //crash\n}\n")),Object(o.b)("p",null,"Moreover, there are functions from the libraries that do not allow ",Object(o.b)("inlineCode",{parentName:"p"},"nil")," to be\npassed as argument. Here are some examples:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-objectivec"}),'-(void) foo {\n    NSString *str = nil;\n    NSArray *animals = @[@"horse", str, @"dolphin"]; //crash\n}\n\n-(void) bar {\n  CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB(); //can return NULL\n  ...\n  CFRelease(colorSpace); //crashes if called with NULL\n}\n')),Object(o.b)("h3",{id:"null-dereference-in-java"},"Null dereference in Java"),Object(o.b)("p",null,"Many of Infer's reports of potential NPE's come from code of the form"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"  p = foo(); // foo() might return null\n  stuff();\n  p.goo();   // dereferencing p, potential NPE\n")),Object(o.b)("p",null,"If you see code of this form, then you have several options."),Object(o.b)("b",null," If you are unsure whether or not foo() will return null "),", you should ideally i. Change the code to ensure that foo() can not return null ii. Add a check for whether p is null, and do something other than dereferencing p when it is null.",Object(o.b)("p",null,"Sometimes, in case ii it is not obvious what you should do when p is null. One\npossibility (a last option) is to throw an exception, failing early. This can be\ndone using checkNotNull as in the following code:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"  // code idiom for failing early\n\n  import static com.google.common.base.Preconditions.checkNotNull;\n\n  //... intervening code\n\n  p = checkNotNull(foo()); // foo() might return null\n  stuff();\n  p.goo();   // dereferencing p, potential NPE\n")),Object(o.b)("p",null,"The call checkNotNull(foo()) will never return null; in case foo() returns null\nit fails early by throwing an NPE."),Object(o.b)("b",null," If you are absolutely sure that foo() will not be null "),", then if you land your diff this case will no longer be reported after your diff makes it to master. In the future we might include analysis directives (hey, analyzer, p is not null!) like in Hack that tell the analyzer the information that you know, but that is for later.",Object(o.b)("h2",{id:"parameter-not-null-checked"},"Parameter not null checked"),Object(o.b)("p",null,"This error type is reported only in Objective-C. It is similar to Null\ndereference, but Infer hasn't found a whole trace where the error can happen,\nbut only found that a null dereference can happen if you call a method with nil\nas an argument. Therefore it is only a warning. For example:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-objectivec"}),"  -(int) foo:(A* a) {\n      B b* = [a foo]; // sending a message with receiver nil returns nil\n      return b->x; // dereferencing b, potential NPE if you pass nil as the argument a.\n  }\n")),Object(o.b)("p",null,"or when the parameter is a block:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-objectivec"}),"   -(void) foo:(void (^)(BOOL))block {\n      block(YES); // calling a nil block will cause a crash.\n   }\n")),Object(o.b)("p",null,"Possible solutions are adding a check for ",Object(o.b)("inlineCode",{parentName:"p"},"nil"),", or making sure that the method\nis not called with ",Object(o.b)("inlineCode",{parentName:"p"},"nil"),". When an argument will never be ",Object(o.b)("inlineCode",{parentName:"p"},"nil"),", you can add the\nannotation ",Object(o.b)("inlineCode",{parentName:"p"},"nonnull")," to the argument's type, to tell Infer (and the type\nsystem), that the argument won't be ",Object(o.b)("inlineCode",{parentName:"p"},"nil"),". This will silence the warning."),Object(o.b)("h2",{id:"premature-nil-termination-argument"},"Premature nil termination argument"),Object(o.b)("p",null,"This error type is reported in C and Objective-C. In many variadic methods,\n",Object(o.b)("inlineCode",{parentName:"p"},"nil")," is used to signify the end of the list of input objects. This is similar\nto nil-termination of C strings. If one of the arguments that is not the last\nargument to the method is ",Object(o.b)("inlineCode",{parentName:"p"},"nil")," as well, Infer reports an error because that may\nlead to unexpected behavior."),Object(o.b)("p",null,"An example of such variadic methods is\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSArray_Class/index.html#//apple_ref/occ/clm/NSArray/arrayWithObjects"}),"arrayWithObjects")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-objectivec"}),'  NSArray *foo = [NSArray arrayWithObjects: @"aaa", str, @"bbb", nil];\n')),Object(o.b)("p",null,"In this example, if ",Object(o.b)("inlineCode",{parentName:"p"},"str")," is ",Object(o.b)("inlineCode",{parentName:"p"},"nil")," then an array ",Object(o.b)("inlineCode",{parentName:"p"},'@[@"aaa"]')," of size 1 will be\ncreated, and not an array ",Object(o.b)("inlineCode",{parentName:"p"},'@[@"aaa", str, @"bbb"]')," of size 3 as expected."),Object(o.b)("h2",{id:"resource-leak"},"Resource leak"),Object(o.b)("p",null,"Infer reports resource leaks in C, Objective-C and Java. In general, resources\nare entities such as files, sockets, connections, etc, that need to be closed\nafter being used."),Object(o.b)("h3",{id:"resource-leak-in-c"},"Resource leak in C"),Object(o.b)("p",null,"This is an example of a resource leak in C code:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-c"}),'-(void) resource_leak_bug {\n    FILE *fp;\n    fp=fopen("c:\\\\test.txt", "r"); // file opened and not closed.\n}\n')),Object(o.b)("h3",{id:"resource-leak-in-java"},"Resource leak in Java"),Object(o.b)("p",null,"For the remaining of this section, we will consider examples of resource leaks\nin Java code."),Object(o.b)("p",null,"TIP: A common source of bugs is ",Object(o.b)("b",null,"exceptions skipping past close()\nstatements"),". That is the first thing to look for if INFER reports a potential\nresource leak."),Object(o.b)("h3",{id:"basics-and-standard-idiom"},"Basics and Standard Idiom"),Object(o.b)("p",null,"Some objects in Java, the ",Object(o.b)("i",null,"resources"),", are supposed to be closed when you\nstop using them, and failure to close is a ",Object(o.b)("i",null,"resource leak"),". Resources\ninclude input streams, output streams, readers, writers, sockets, http\nconnections, cursors, and json parsers."),Object(o.b)("p",null,"The standard idiom is"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"  // Standard idiom\n  Allocate resource\n  try {\n    do some stuff\n  } finally {\n    close resource\n  }\n")),Object(o.b)("p",null,"or more for example,"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'  //  Standard Idiom\n  public static void foo () throws IOException{\n    FileOutputStream fos = new FileOutputStream(new File("whatever.txt"));\n    try {\n      fos.write(7);\n    } finally {\n      fos.close();\n    }\n  }\n')),Object(o.b)("p",null,"and you should use the standard idiom for the most part, when you don't want to\nreturn the resource to the surrounding context."),Object(o.b)("p",null,"Sometimes people just leave out close(), and that is a bug, but more typically\nexceptional paths are the root of the problem, as in"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'  // leak because of exception\n  public static void foo () throws IOException {\n    FileOutputStream fos = new FileOutputStream(new File("whatever.txt"));\n    fos.write(7);   //DOH! What if exception?\n    fos.close();\n  }\n')),Object(o.b)("p",null,"where an exception in fos.write will cause execution to skip past the close()\nstatement."),Object(o.b)("h4",{id:"multiple-resources-bugs"},"Multiple Resources Bugs"),Object(o.b)("p",null,"We can deal with multiple resources correctly and simply just by nesting the\nstandard idiom."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'  // Two Resources nested\n  public static void foo() throws IOException {\n    FileInputStream fis = new FileInputStream(new File("whatever.txt"));\n    try {\n      FileOutputStream fos = new FileOutputStream(new File("everwhat.txt"));\n      try {\n        fos.write(fis.read());\n      } finally {\n        fos.close();\n      }\n    } finally {\n      fis.close();\n    }\n  }\n')),Object(o.b)("p",null,"Bugs often occur when using multiple resources in other ways because of\nexceptions in close() methods. For example,"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'  // Classic Two Resources Bug\n  public static void foo() throws IOException {\n    FileInputStream fis = null;\n    FileOutputStream fos = null;\n    try {\n      fis = new FileInputStream(new File("whatever.txt"));\n      fos = new FileOutputStream(new File("everwhat.txt"));\n      fos.write(fis.read());\n    } finally {\n      if (fis!=null)  fis.close();\n      if (fos!=null) fos.close();\n    }\n  }\n')),Object(o.b)("p",null,"Here, if there is an exception in the call to fis.close() execution will skip\npast fos.close(); a leak."),Object(o.b)("p",null,"Another way, besides the standard idiom, to deal with this problem is to swallow\nexceptions."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'  // Two Resources Fix 1\n  public static void foo() throws IOException {\n    FileInputStream fis = null;\n    FileOutputStream fos = null;\n    try {\n      fis = new FileInputStream(new File("whatever.txt"));\n      fos = new FileOutputStream(new File("everwhat.txt"));\n      fos.write(fis.read());\n    } finally {\n      try {\n        if (fis!=null) fis.close();\n      } catch (Exception e) {};  // Exception swallowing\n      if (fos!=null) fos.close();\n    }\n  }\n')),Object(o.b)("p",null,"You can also swallow the exception on the output stream. Some people prefer not\nto swallow output stream exceptions, and also flush before closing.\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"http://code.google.com/p/guava-libraries/issues/detail?id=1118"}),"http://code.google.com/p/guava-libraries/issues/detail?id=1118")),Object(o.b)("p",null,"Notice that the nested standard idiom does not need the checks for null, which\nare in there in this case to protect against the case when one of the\nallocations throws an exception, in which case one would get a\nNullPointerException."),Object(o.b)("h3",{id:"nested_allocations"},"Nested_Allocations"),Object(o.b)("p",null,"When a resource allocation is included as an argument to a constructor, if the\nconstructor fails it can leave an an unreachable resource that no one can close."),Object(o.b)("p",null,"For example gzipOutputStream = new GZIPOutputStream(new FileOutputStream(out));\nis bad in case the outer constructor, GZIPOutputStream, throws an exception. In\nthat case, no one will have a hold of the FileOutputStream and so no one will be\nable to close it."),Object(o.b)("p",null,"In such a case you need to move the allocation the FileOutputStream out of the\nnested position and name it, so you are able to close if anything goes wrong\nduring execution of the GZIPOutputStream constructor."),Object(o.b)("p",null,"Here are resources that can throw exceptions i their constructor(s)."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"ObjectInputStream , ObjectOutputStream, PipedInputStream, PipedOutputStream,\nPipedReader, PipedWriter, JarInputStream, JarOutputStream, GZIPInputStream,\nGZIPOutputStream , ZipFile all throw IOException"),Object(o.b)("li",{parentName:"ul"},"PrintStream throws UnsupportedEncodingException")),Object(o.b)("p",null,"The constructors for FileInputStream, FileOutputStream and RandomAccessFile\nthrow FileNotFoundException, but these cases are not problematic in the sense\nthat their arguments are not resources and so they do not cause the nested\nresource leak."),Object(o.b)("h3",{id:"allocation-of-jsonparser-and-cursor-resources"},"Allocation of JSonParser and Cursor resources"),Object(o.b)("p",null,'Some resources are created inside libraries instead of by "new".'),Object(o.b)("p",null,"Cursor is an interface, the actual resources are something like SQLiteCursor.\nSo, every time you call a function that returns a Cursor object, there is an\nallocation."),Object(o.b)("p",null,"For instance, in the functions from SQLiteDatabase query(\u2026) and rawQuery(\u2026)\nallocate a cursor resource. For SQLiteQueryBuilder, ContentProviderClient,\nContentResolver. MediaStore and DownloadManager it is only query(\u2026) Cursor\nobjects cursor created by these functions need to be closed (i.e.,\ncursor.close())."),Object(o.b)("p",null,"Similarly, JsonParser is an abstract class, and create a resource in functions\nfrom the class JsonFactory createParser(byte[] data) createParser(byte[] data,\nint offset, int len) createParser(String content) createParser(URL url)\ncreateParser(File f) JsonParser objects js created by these functions need to be\nclosed (jp.close()). On the other hand . JasonParsers gotten from\ncreateParser(InputStream in) and createParser(Reader r) give you JsonParsers\nthat don\u2019t need to be closed. This is because they receive the resource from\nsomewhere that will maintain the responsibility to close it."),Object(o.b)("h3",{id:"escaping-resources-and-exceptions"},"Escaping resources and exceptions"),Object(o.b)("p",null,"Sometimes you want to return a resource to the outside, in which case you should\nnot close it, but you still need to be careful of exceptions in case control\nskips past the return leaving no one to close. Here is a simple example of a\npositive use of escaping resources."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"  // An escaping resource, shouldn't close\n  public BugReportAttachment createAttachment(File reportDirectory, String fileName)\n      throws FileNotFoundException {\n    File file = new File(reportDirectory, fileName);\n    OutputStream stream = new FileOutputStream(file);\n    return new BugReportAttachment(Uri.fromFile(file), stream);\n  }\n")),Object(o.b)("p",null,"In this case it is intended that an object that wraps ",Object(o.b)("inlineCode",{parentName:"p"},"stream")," is passed to the\ncaller of ",Object(o.b)("inlineCode",{parentName:"p"},"createAttachment"),". You should certainly not close stream here,\nbecause it is being passed to the outside."),Object(o.b)("p",null,"But for escaping resources like this you still need to be careful of exceptions.\nFor example, in"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"  // An escaping resource, and a leak\n  public BugReportAttachment createAttachment(File reportDirectory, String fileName)\n      throws FileNotFoundException {\n    File file = new File(reportDirectory, fileName);\n    OutputStream stream = new FileOutputStream(file);\n    stream.write(7);\n    return new BugReportAttachment(Uri.fromFile(file), stream);\n  }\n")),Object(o.b)("p",null,"if stream.write(7) throws an exception, then no one will have a hold of stream,\nand no one will be able to close it; a leak."),Object(o.b)("h3",{id:"java-7s-try-with-resources"},"Java 7's try-with-resources"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"(For use with Java 7 only)")),Object(o.b)("p",null,"Clearly, accounting for the ramifications of all the exceptional cases is\ncomplicated, and there is a better way in Java 7."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'  // Two Resources Fix 2; via try-with-resources\n  public static void foo() throws IOException {\n    try (\n      FileInputStream fis = new FileInputStream(new File("whatever.txt"));\n      FileOutputStream fos = new FileOutputStream(new File("everwhat.txt"))\n    ) {\n      fos.write(fis.read());\n    }\n  }\n')),Object(o.b)("p",null,"All the complicated exceptional cases above are (apparently) covered by this\nconstruct, and the result is much simpler."),Object(o.b)("p",null,"So, if you are trying to fix a potential leak in code with multiples resources\nyou can go ahead and try to understand whether the potential leak is real. Or,\nif the code is complex and it is hard to figure out, it would be perfectly\nlegitimate to simply convert the code over to try-with-resources if you have\naccess to Java 7, so as to save yourself some brain-cycles. You will also end up\nwith cleaner code."),Object(o.b)("p",null,"If try-with-resources is so great you should ",Object(o.b)("i",null,"always"),' use it. But you\nshouldn\'t\u2026 Try-with-resources gives resources static scoping, and works via a\nstack discipline. Sometimes, you want a resource to persist beyond scope, as in\nthe escaping example above. In an escaping example maybe you could refactor lots\nof code so that try-with-resources applies, and maybe you cannot in a sensible\nway. This just illustrates that, though you might hear people say that\ntry-with-resources "solves" the resource problem, it does not. It is very\nuseful, but you cannot use it blindly when you see a resource-allocation site.'),Object(o.b)("h2",{id:"retain-cycle"},"Retain cycle"),Object(o.b)("p",null,"A retain cycle is a situation when object A retains object B, and object B\nretains object A at the same time. Here is an example:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-objectivec"}),"@class Child;\n@interface Parent : NSObject {\n    Child *child; // Instance variables are implicitly __strong\n}\n@end\n@interface Child : NSObject {\n    Parent *parent;\n}\n@end\n")),Object(o.b)("p",null,"You can fix a retain cycle in ARC by using ","_","_",'weak variables or weak properties\nfor your "back links", i.e. links to direct or indirect parents in an object\nhierarchy:'),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-objectivec"}),"@class Child;\n@interface Parent : NSObject {\n    Child *child;\n}\n@end\n@interface Child : NSObject {\n    __weak Parent *parent;\n}\n@end\n")),Object(o.b)("h2",{id:"static-initialization-order-fiasco"},"Static initialization order fiasco"),Object(o.b)("p",null,"This error is reported in C++. It fires when the initialization of a static\nvariable ",Object(o.b)("inlineCode",{parentName:"p"},"A"),", accesses a static variable ",Object(o.b)("inlineCode",{parentName:"p"},"B")," from another translation unit\n(usually another ",Object(o.b)("inlineCode",{parentName:"p"},".cpp")," file). There are no guarantees whether ",Object(o.b)("inlineCode",{parentName:"p"},"B")," has been\nalready initialized or not at that point."),Object(o.b)("p",null,"For more technical definition and techniques to avoid/remediate, see the\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://isocpp.org/wiki/faq/ctors#static-init-order"}),"FAQ"),"."),Object(o.b)("h2",{id:"thread-safety-violation"},"Thread-safety violation"),Object(o.b)("p",null,"This warning indicates a potential data race in Java. The analyser is called\nRacerD and this section gives brief but a mostly complete description of its\nfeatures. See the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/racerd"}),"RacerD page")," for more in-depth information and\nexamples."),Object(o.b)("p",null,"NB this warning ",Object(o.b)("strong",{parentName:"p"},"is not related to @GuardedBy")," and not issued by the same\nanalysis."),Object(o.b)("h3",{id:"thread-safety-what-is-a-data-race"},"Thread-safety: What is a data race"),Object(o.b)("p",null,"Here a data race is a pair of accesses to the same member field such that:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"at least one is a write, and,"),Object(o.b)("li",{parentName:"ul"},"at least one occurs without any lock synchronization, and,"),Object(o.b)("li",{parentName:"ul"},"the two accesses occur on threads (if known) which can run in parallel.")),Object(o.b)("h3",{id:"thread-safety-potential-fixes"},"Thread-safety: Potential fixes"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Synchronizing the accesses (using the ",Object(o.b)("inlineCode",{parentName:"li"},"synchronized")," keyword, thread-exclusion\nsuch as atomic objects, ",Object(o.b)("inlineCode",{parentName:"li"},"volatile")," etc)."),Object(o.b)("li",{parentName:"ul"},"Making an offending method private -- this will exclude it from being checked\nat the top level, though it will be checked if called by a public method which\nmay itself, e.g., hold a lock when calling it."),Object(o.b)("li",{parentName:"ul"},"Putting the two accesses on the same thread, e.g., by using ",Object(o.b)("inlineCode",{parentName:"li"},"@MainThread")," or\n",Object(o.b)("inlineCode",{parentName:"li"},"@ThreadConfined"),".")),Object(o.b)("h3",{id:"thread-safety-conditions-checked-before-reporting"},"Thread-safety: Conditions checked before reporting"),Object(o.b)("p",null,"The class and method are not marked ",Object(o.b)("inlineCode",{parentName:"p"},"@ThreadSafe(enableChecks = false)"),", and,"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"The method is declared ",Object(o.b)("inlineCode",{parentName:"li"},"synchronized"),", or employs (non-transitively) locking,\nor,"),Object(o.b)("li",{parentName:"ul"},"The class is not marked ",Object(o.b)("inlineCode",{parentName:"li"},"@NotThreadSafe"),", and,",Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"The class/method is marked ",Object(o.b)("inlineCode",{parentName:"li"},"@ThreadSafe,")," or one of the configured synonyms\nin ",Object(o.b)("inlineCode",{parentName:"li"},".inferconfig"),", or,"),Object(o.b)("li",{parentName:"ul"},"A parent class, or an override method are marked with the above annotations.")))),Object(o.b)("p",null,"NB currently RacerD ",Object(o.b)("strong",{parentName:"p"},"does not take into account ",Object(o.b)("inlineCode",{parentName:"strong"},"@GuardedBy")),"."),Object(o.b)("h3",{id:"thread-safety-thread-annotations-recognized-by-racerd"},"Thread-safety: Thread annotations recognized by RacerD"),Object(o.b)("p",null,"These class and method annotations imply the method is on the main thread:\n",Object(o.b)("inlineCode",{parentName:"p"},"@MainThread"),", ",Object(o.b)("inlineCode",{parentName:"p"},"@UiThread")),Object(o.b)("p",null,"These method annotations imply the method is on the main thread: ",Object(o.b)("inlineCode",{parentName:"p"},"@OnBind"),",\n",Object(o.b)("inlineCode",{parentName:"p"},"@OnEvent"),", ",Object(o.b)("inlineCode",{parentName:"p"},"@OnMount"),", ",Object(o.b)("inlineCode",{parentName:"p"},"@OnUnbind"),", ",Object(o.b)("inlineCode",{parentName:"p"},"@OnUnmount")),Object(o.b)("p",null,"Both classes of annotations work through the inheritance tree (i.e. if a parent\nclass or method is marked with one of these annotations, so is the child class /\nmethod override)."),Object(o.b)("p",null,"In addition to these, RacerD recognizes many lifecycle methods as necessarily\nrunning on the main thread, eg ",Object(o.b)("inlineCode",{parentName:"p"},"Fragment.onCreate")," etc."),Object(o.b)("p",null,"Finally, the thread status of being on the main thread propagates backwards\nthrough the call graph (ie if ",Object(o.b)("inlineCode",{parentName:"p"},"foo")," calls ",Object(o.b)("inlineCode",{parentName:"p"},"bar")," and ",Object(o.b)("inlineCode",{parentName:"p"},"bar")," is marked ",Object(o.b)("inlineCode",{parentName:"p"},"@UiThtread"),"\nthen ",Object(o.b)("inlineCode",{parentName:"p"},"foo")," is automatically considered on the main thread too). Calling\n",Object(o.b)("inlineCode",{parentName:"p"},"assertMainThread"),", ",Object(o.b)("inlineCode",{parentName:"p"},"assertOnUiThread"),", ",Object(o.b)("inlineCode",{parentName:"p"},"checkOnMainThread")," has the same effect."),Object(o.b)("p",null,"NB RacerD currently ",Object(o.b)("strong",{parentName:"p"},"does not recognize ",Object(o.b)("inlineCode",{parentName:"strong"},"@WorkerThread"),", ",Object(o.b)("inlineCode",{parentName:"strong"},"@BinderThread")," or\n",Object(o.b)("inlineCode",{parentName:"strong"},"@AnyThread")),"."),Object(o.b)("h3",{id:"thread-safety-other-annotations-and-what-they-do"},"Thread-safety: Other annotations and what they do"),Object(o.b)("p",null,"These annotations can be found at ",Object(o.b)("inlineCode",{parentName:"p"},"com.facebook.infer.annotation.*"),"."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"@Functional")," This is a method annotation indicating the method always returns\nthe same value. When a method ",Object(o.b)("inlineCode",{parentName:"p"},"foo")," is annotated ",Object(o.b)("inlineCode",{parentName:"p"},"@Functional"),", RacerD will\nignore any writes of the return value of ",Object(o.b)("inlineCode",{parentName:"p"},"foo"),". For example, in\n",Object(o.b)("inlineCode",{parentName:"p"},"this.x = foo()"),", the write to ",Object(o.b)("inlineCode",{parentName:"p"},"this.x")," is ignored. The reasoning is that if\nthe method returns the same value whenever it's called, any data race on\n",Object(o.b)("inlineCode",{parentName:"p"},"this.x")," is benign, if that is the only write.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"@ThreadConfined")," This is a class/method/field annotation which takes a single\nparameter which can be ",Object(o.b)("inlineCode",{parentName:"p"},"UI"),", ",Object(o.b)("inlineCode",{parentName:"p"},"ANY")," or a user chosen string. It indicates to\nRacerD a thread identifier for the class/method/field. Thus,\n",Object(o.b)("inlineCode",{parentName:"p"},"@ThreadConfined(UI)")," is equivalent to ",Object(o.b)("inlineCode",{parentName:"p"},"@UiThread"),", and ",Object(o.b)("inlineCode",{parentName:"p"},"@ThreadConfined(ANY)"),"\nis equivalent to not having the annotation at all, for classes and methods.\nWhen this annotation is applied to a field it instructs Infer to assume\n(without checking) that all accesses to that field are made on the same thread\n(and can, therefore, not race by definition). The intention is that RacerD\nuses that to detect exclusion between accesses occurring on the same thread.\nHowever, only the UI thread is supported at this time, and any user provided\nvalue is considered equal to ",Object(o.b)("inlineCode",{parentName:"p"},"UI"),".")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"@VisibleForTesting")," A method annotation making Infer consider the method as\neffectively ",Object(o.b)("inlineCode",{parentName:"p"},"private"),". This means it will not be checked for races against\nother non-private methods of the class, but only if called by one.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"@ReturnsOwnership")," A method annotation indicating that the method returns a\nfreshly owned object. Accesses to the returned value will not be considered\nfor data races, as the object is in-effect unique and not accessible yet from\nother threads. The main utility of this annotation is in interfaces, where\nInfer cannot look up the implementation and decide for itself."))),Object(o.b)("h2",{id:"ui-thread-starvation"},"UI Thread Starvation"),Object(o.b)("p",null,"This error is reported in Java, and specifically on Android. These reports are\ntriggered when a method that runs on the UI thread may block, thus potentially\nleading to an Application Not Responding error."),Object(o.b)("p",null,"Infer considers a method as running on the UI thread whenever:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"The method, one of its overrides, its class, or an ancestral class, is\nannotated with ",Object(o.b)("inlineCode",{parentName:"li"},"@UiThread"),"."),Object(o.b)("li",{parentName:"ul"},"The method, or one of its overrides is annotated with ",Object(o.b)("inlineCode",{parentName:"li"},"@OnEvent"),", ",Object(o.b)("inlineCode",{parentName:"li"},"@OnClick"),",\netc."),Object(o.b)("li",{parentName:"ul"},"The method or its callees call a ",Object(o.b)("inlineCode",{parentName:"li"},"Litho.ThreadUtils")," method such as\n",Object(o.b)("inlineCode",{parentName:"li"},"assertMainThread"),".")),Object(o.b)("p",null,"The issue is reported when a method deemed to run on the UI thread"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Makes a method call which may block."),Object(o.b)("li",{parentName:"ul"},"Takes a lock, and another thread takes the same lock, and before releasing it,\nmakes a call that may block.")),Object(o.b)("p",null,"Calls that may block are considered:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Certain I/O calls."),Object(o.b)("li",{parentName:"ul"},"Two way ",Object(o.b)("inlineCode",{parentName:"li"},"Binder.transact")," calls."),Object(o.b)("li",{parentName:"ul"},"Certain OS calls."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"Future")," or ",Object(o.b)("inlineCode",{parentName:"li"},"AsyncTask")," calls to ",Object(o.b)("inlineCode",{parentName:"li"},"get")," without timeouts, or with too large\ntimeouts.")),Object(o.b)("p",null,"To suppress starvation reports in a method ",Object(o.b)("inlineCode",{parentName:"p"},"m()")," use the\n",Object(o.b)("inlineCode",{parentName:"p"},'@SuppressLint("STARVATION")')," annotation, as follows:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'  import android.annotation.SuppressLint;\n\n  @SuppressLint("STARVATION")\n  public void m() {\n  ...\n  }\n')),Object(o.b)("p",null,"To signal to Infer that a method does not perform any blocking calls, despite\nappearences, you can use the ",Object(o.b)("inlineCode",{parentName:"p"},"@NonBlocking")," annotation:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"  import com.facebook.infer.annotation.NonBlocking;\n\n  @NonBlocking\n  public void m() {\n  ...\n  }\n")),Object(o.b)("p",null,"This instructs Infer to filter out any potentially blocking calls in ",Object(o.b)("inlineCode",{parentName:"p"},"m()"),"\n(also, transitively), and thus any other method can expect no starvation reports\ndue to a call to ",Object(o.b)("inlineCode",{parentName:"p"},"m()"),". You will need to set up your class path appropriately to\ninclude the JAR files in ",Object(o.b)("inlineCode",{parentName:"p"},"infer/annotations")," for this annotation to work."),Object(o.b)("h2",{id:"strict-mode-violation"},"Strict mode violation"),Object(o.b)("p",null,"Android has a feature called\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://developer.android.com/reference/android/os/StrictMode"}),"strict mode"),",\nwhich if enabled, will flag the occasions where the main thread makes a call\nthat results in disk I/O, waiting on a network socket, etc. The analysis\ncatching starvation errors and deadlocks (the ",Object(o.b)("inlineCode",{parentName:"p"},"--starvation")," analysis) has the\nability to statically detect such violations."),Object(o.b)("p",null,"To suppress this warning, it's enough to annotate the offending method with\n",Object(o.b)("inlineCode",{parentName:"p"},'@SuppressLint("STRICT_MODE_VIOLATION")'),"."),Object(o.b)("h2",{id:"strongself-not-checked"},"StrongSelf Not Checked"),Object(o.b)("p",null,"When a block captures ",Object(o.b)("inlineCode",{parentName:"p"},"weakSelf")," in the following pattern:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"__weak __typeof(self) weakSelf = self;\n  int (^my_block)() = ^() {\n    __strong __typeof(weakSelf) strongSelf = weakSelf;\n    int y = strongSelf->x;\n")),Object(o.b)("p",null,"the variable ",Object(o.b)("inlineCode",{parentName:"p"},"strongSelf")," should be checked for ",Object(o.b)("inlineCode",{parentName:"p"},"null")," before being used,\notherwise this could cause a crash because the weak pointer ",Object(o.b)("inlineCode",{parentName:"p"},"weakSelf")," could be\n",Object(o.b)("inlineCode",{parentName:"p"},"null"),"."),Object(o.b)("h2",{id:"unsafe-guardedby-access"},"Unsafe GuardedBy Access"),Object(o.b)("p",null,"Infer reports issues when a field or method is accessed when a lock is not held,\nwhen the field or method has been annotated with ",Object(o.b)("inlineCode",{parentName:"p"},"@GuardedBy(lock)"),". In many\ncases the lock is ",Object(o.b)("inlineCode",{parentName:"p"},"this"),". Here is a basic example:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),'\nimport javax.annotation.concurrent.GuardedBy;\n\nclass GB{\n\n@GuardedBy("this")\nint y;\n\nvoid foo(){  y = 22; }\n\nvoid goo(){  synchronized (this) {y = 82;} }\n\n}\n')),Object(o.b)("p",null,"Infer duly warns on the access to ",Object(o.b)("inlineCode",{parentName:"p"},"y")," in ",Object(o.b)("inlineCode",{parentName:"p"},"foo()"),", but not in ",Object(o.b)("inlineCode",{parentName:"p"},"goo()"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),'GB.java:9: error: UNSAFE_GUARDED_BY_ACCESS\n  The field `GB.y` is annotated with `@GuardedBy("GB.this")`, but the lock `GB.this` is not held during the access to the field at line 9. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(GB.this)` block or making the method private.\n  7.   int y;\n  8.\n  9. > void foo(){  y = 22; }\n  10.\n  11.   void goo(){  synchronized (this) {y = 82;} }\n')),Object(o.b)("a",{name:"anonymous_inner"}),' Infer can distinguish between different locks. A particularly tricky example comes up sometimes where different occurrences of the keyword `this` in the same file mean different things ("this this is not that this").',Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),'\nclass Outer{\n\n@GuardedBy("this")\nObject y;\n\nObject foo(){\n  return new Object () {\n    void m0() {\n           synchronized (this)\n             { y = null; }\n    }\n    void m1() {\n           synchronized (Outer.this)\n             { y = null; }\n    }\n  };\n}\n\n}\n')),Object(o.b)("p",null,'In this use of "anonymous inner classes" the occurrence of ',Object(o.b)("inlineCode",{parentName:"p"},"this")," in method\n",Object(o.b)("inlineCode",{parentName:"p"},"m0()")," refers to the closure created when the new object is created, not to the\n",Object(o.b)("inlineCode",{parentName:"p"},"this")," that guards ",Object(o.b)("inlineCode",{parentName:"p"},"y"),". It is a bug, and the fix is to refer to the proper\n",Object(o.b)("inlineCode",{parentName:"p"},"this")," as in method ",Object(o.b)("inlineCode",{parentName:"p"},"m1()"),". Infer correctly warns on the access in ",Object(o.b)("inlineCode",{parentName:"p"},"m0()")," but\nnot ",Object(o.b)("inlineCode",{parentName:"p"},"m1()"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),'Outer.java:13: error: UNSAFE_GUARDED_BY_ACCESS\n  The field `Outer.y` is annotated with `@GuardedBy("Outer.this")`, but the lock `Outer.this` is not held during the access to the field at line 13. Since the current method is non-private, it can be called from outside the current class without synchronization. Consider wrapping the access in a `synchronized(Outer.this)` block or making the method private.\n  11.       void m0() {\n  12.              synchronized (this)\n  13. >              { y = null; }\n  14.       }\n\n')),Object(o.b)("h2",{id:"weakself-in-noescape-block"},"weakSelf In NOESCAPE Block"),Object(o.b)("p",null,"In many methods that take a block as an argument, the block position is\nannotated with NS_NOESCAPE to mark that the block passed to this method won't be\nleaving the current scope. In those cases, there is no need to use ",Object(o.b)("inlineCode",{parentName:"p"},"weakSelf")," to\navoid the block to capture ",Object(o.b)("inlineCode",{parentName:"p"},"self"),". This issue type flags this case."))}b.isMDXComponent=!0},298:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return h}));var a=t(0),i=t.n(a);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=i.a.createContext({}),b=function(e){var n=i.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=b(e.components);return i.a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},p=i.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,r=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=b(t),p=a,h=d["".concat(r,".").concat(p)]||d[p]||u[p]||o;return t?i.a.createElement(h,l(l({ref:n},s),{},{components:t})):i.a.createElement(h,l({ref:n},s))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,r=new Array(o);r[0]=p;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var s=2;s<o;s++)r[s]=t[s];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,t)}p.displayName="MDXCreateElement"}}]);