(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{160:function(e,n,a){"use strict";a.r(n),a.d(n,"frontMatter",(function(){return r})),a.d(n,"rightToc",(function(){return c})),a.d(n,"metadata",(function(){return l})),a.d(n,"default",(function(){return p}));var t=a(1),o=a(9),i=(a(0),a(174)),r={id:"analyzing-apps-or-projects",title:"Analyzing apps or projects"},c=[{value:"ant",id:"ant",children:[]},{value:"Buck",id:"buck",children:[]},{value:"cmake",id:"cmake",children:[]},{value:"Gradle",id:"gradle",children:[]},{value:"Make",id:"make",children:[]},{value:"Maven",id:"maven",children:[]},{value:"Xcodebuild",id:"xcodebuild",children:[]},{value:"xctool",id:"xctool",children:[]},{value:"Using a compilation database",id:"using-a-compilation-database",children:[]},{value:"Other build systems",id:"other-build-systems",children:[]}],l={id:"analyzing-apps-or-projects",title:"Analyzing apps or projects",description:"To analyze files with Infer you can use the compilers `javac` and `clang`. You",source:"@site/docs/01-analyzing-apps-or-projects.md",permalink:"/docs/analyzing-apps-or-projects",sidebar:"docs",previous:{title:"Infer workflow",permalink:"/docs/infer-workflow"},next:{title:"Recommended flow for CI",permalink:"/docs/steps-for-ci"}},s={rightToc:c,metadata:l},b="wrapper";function p(e){var n=e.components,a=Object(o.a)(e,["components"]);return Object(i.b)(b,Object(t.a)({},s,a,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"To analyze files with Infer you can use the compilers ",Object(i.b)("inlineCode",{parentName:"p"},"javac")," and ",Object(i.b)("inlineCode",{parentName:"p"},"clang"),". You\ncan also use Infer with ",Object(i.b)("inlineCode",{parentName:"p"},"gcc"),", however, internally Infer will use ",Object(i.b)("inlineCode",{parentName:"p"},"clang")," to\ncompile your code. So, it may not work if your code does not compile with\n",Object(i.b)("inlineCode",{parentName:"p"},"clang"),"."),Object(i.b)("p",null,"Moreover, you can run Infer with a variety of build systems. Notice that you can\nrun infer faster by running the compilation command in parallel, e.g.\n",Object(i.b)("inlineCode",{parentName:"p"},"infer run -- make -j8"),". Please also take into account that if you wish to\nanalyze a project, you should probably do ",Object(i.b)("inlineCode",{parentName:"p"},"clean")," beforehand so that the\ncompiler compiles all the files and so Infer also analyses all the files (see\nthe ",Object(i.b)("a",Object(t.a)({parentName:"p"},{href:"infer-workflow"}),"previous section"),")."),Object(i.b)("p",null,"Here is an overview of the build systems supported by Infer. You can get more\ninformation about how a particular build system is supported by looking at the\nSYNOPSIS section of the infer-capture manual: ",Object(i.b)("inlineCode",{parentName:"p"},"infer capture --help"),"."),Object(i.b)("h3",{id:"ant"},"ant"),Object(i.b)("pre",null,Object(i.b)("code",Object(t.a)({parentName:"pre"},{className:"language-bash"}),"infer run -- ant\n")),Object(i.b)("h3",{id:"buck"},"Buck"),Object(i.b)("p",null,"Running:"),Object(i.b)("pre",null,Object(i.b)("code",Object(t.a)({parentName:"pre"},{className:"language-bash"}),"infer run -- buck <buck target>\n")),Object(i.b)("p",null,"will compute the list of Infer warnings in the targets passed as argument."),Object(i.b)("p",null,"Running:"),Object(i.b)("pre",null,Object(i.b)("code",Object(t.a)({parentName:"pre"},{className:"language-bash"}),"infer run -- buck --deep <buck target>\n")),Object(i.b)("p",null,"will compute the list of Infer warnings in the targets passed as argument and\nall the transitive dependencies."),Object(i.b)("p",null,"The distinction between ",Object(i.b)("inlineCode",{parentName:"p"},"--deep")," and the normal Buck complation mode is only\nsupported for Java projects. For the other kinds of projects, the ",Object(i.b)("inlineCode",{parentName:"p"},"--deep"),"\noption has no effect."),Object(i.b)("h3",{id:"cmake"},"cmake"),Object(i.b)("p",null,"The most robust way is to have ",Object(i.b)("inlineCode",{parentName:"p"},"cmake")," generate a compilation database that can\nbe then processed by Infer:"),Object(i.b)("pre",null,Object(i.b)("code",Object(t.a)({parentName:"pre"},{className:"language-bash"}),"cd build\ncmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 ..\ncd ..\ninfer run --compilation-database build/compile_commands.json\n")),Object(i.b)("p",null,"Alternatively, one can trick ",Object(i.b)("inlineCode",{parentName:"p"},"cmake")," into using infer instead of the system's\ncompilers:"),Object(i.b)("pre",null,Object(i.b)("code",Object(t.a)({parentName:"pre"},{className:"language-bash"}),"cd build\ninfer compile -- cmake ..\ninfer run -- make -j 4\n")),Object(i.b)("h3",{id:"gradle"},"Gradle"),Object(i.b)("pre",null,Object(i.b)("code",Object(t.a)({parentName:"pre"},{className:"language-bash"}),'infer run -- gradle <gradle task, e.g. "build">\ninfer run -- ./gradlew <gradle task, e.g. "build">\n')),Object(i.b)("h3",{id:"make"},"Make"),Object(i.b)("p",null,"Infer can analyze projects that compile with ",Object(i.b)("inlineCode",{parentName:"p"},"make")," by switching the compilers\n(for C/C++/Objective-C or Java) called by ",Object(i.b)("inlineCode",{parentName:"p"},"make")," with infer wrappers. This\ndoesn't always work, for instance if the Makefiles hardcode the absolute paths\nto the compilers (eg, if ",Object(i.b)("inlineCode",{parentName:"p"},"make")," calls ",Object(i.b)("inlineCode",{parentName:"p"},"/usr/bin/gcc")," instead of ",Object(i.b)("inlineCode",{parentName:"p"},"gcc"),"). This is\nbecause this integration works by modifying ",Object(i.b)("inlineCode",{parentName:"p"},"PATH")," under the hood."),Object(i.b)("pre",null,Object(i.b)("code",Object(t.a)({parentName:"pre"},{className:"language-bash"}),"infer run -- make <make target>\n")),Object(i.b)("h3",{id:"maven"},"Maven"),Object(i.b)("pre",null,Object(i.b)("code",Object(t.a)({parentName:"pre"},{className:"language-bash"}),"infer run -- mvn <maven target>\n")),Object(i.b)("h3",{id:"xcodebuild"},"Xcodebuild"),Object(i.b)("p",null,"The most robust way is to generate a compilation database, then pass that\ndatabase to Infer:"),Object(i.b)("pre",null,Object(i.b)("code",Object(t.a)({parentName:"pre"},{className:"language-bash"}),"xcodebuild <your build options> | tee xcodebuild.log\nxcpretty -r json-compilation-database -o compile_commands.json < xcodebuild.log > /dev/null\ninfer run --skip-analysis-in-path Pods --clang-compilation-db-files-escaped compile_commands.json\n")),Object(i.b)("p",null,"See also\n",Object(i.b)("a",Object(t.a)({parentName:"p"},{href:"https://github.com/facebook/infer/issues/9#issuecomment-280121791"}),"this comment on GitHub"),"."),Object(i.b)("p",null,"Infer also provides a direct integration to xcodebuild that swaps the compiler\nused by xcodebuild under the hood. For instance, for an iOS app:"),Object(i.b)("pre",null,Object(i.b)("code",Object(t.a)({parentName:"pre"},{className:"language-bash"}),"infer run -- xcodebuild -target <target name> -configuration <build configuration> -sdk iphonesimulator\n")),Object(i.b)("p",null,"There is an alternative xcodebuild integration that uses ",Object(i.b)("inlineCode",{parentName:"p"},"xcpretty")," under the\nhood; use it by passing ",Object(i.b)("inlineCode",{parentName:"p"},"--xcpretty")," to infer."),Object(i.b)("h3",{id:"xctool"},"xctool"),Object(i.b)("p",null,"Use ",Object(i.b)("inlineCode",{parentName:"p"},"xctool")," to generate a compilation database then pass it to infer:"),Object(i.b)("pre",null,Object(i.b)("code",Object(t.a)({parentName:"pre"},{className:"language-bash"}),"xctool.sh <your build options> -reporter json-compilation-database:compile_commands.json\ninfer run --skip-analysis-in-path Pods --clang-compilation-db-files-escaped compile_commands.json\n")),Object(i.b)("p",null,"See also\n",Object(i.b)("a",Object(t.a)({parentName:"p"},{href:"https://github.com/facebook/infer/issues/9#issuecomment-280121791"}),"this comment on GitHub"),"."),Object(i.b)("h3",{id:"using-a-compilation-database"},"Using a compilation database"),Object(i.b)("p",null,"Many build systems like cmake, Xcode or Buck generate compilation databases.\ninfer is able to use this database directly, simplifying its usage."),Object(i.b)("pre",null,Object(i.b)("code",Object(t.a)({parentName:"pre"},{className:"language-bash"}),"infer --compilation-database compile_commands.json\n")),Object(i.b)("h3",{id:"other-build-systems"},"Other build systems"),Object(i.b)("p",null,"If infer doesn't recognize your build system, you will get an error like this:"),Object(i.b)("pre",null,Object(i.b)("code",Object(t.a)({parentName:"pre"},{className:"language-console"}),"$ infer run -- foo\nUsage Error: Unsupported build command foo\n")),Object(i.b)("p",null,"If your build system behaves like one of the above, you can tell infer to use\nthe same integration with ",Object(i.b)("inlineCode",{parentName:"p"},"--force-integration"),". For instance this will proceed\nas if ",Object(i.b)("inlineCode",{parentName:"p"},"foo")," was working the same way as ",Object(i.b)("inlineCode",{parentName:"p"},"make"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(t.a)({parentName:"pre"},{className:"language-bash"}),"infer run --force-integration make -- foo\n")),Object(i.b)("p",null,"If your build system is more exotic, and it doesn't support outputting\ncompilation databases, please let us know by\n",Object(i.b)("a",Object(t.a)({parentName:"p"},{href:"https://github.com/facebook/infer/issues/new"}),"opening an issue"),"."))}p.isMDXComponent=!0},174:function(e,n,a){"use strict";a.d(n,"a",(function(){return c})),a.d(n,"b",(function(){return p}));var t=a(0),o=a.n(t),i=o.a.createContext({}),r=function(e){var n=o.a.useContext(i),a=n;return e&&(a="function"==typeof e?e(n):Object.assign({},n,e)),a},c=function(e){var n=r(e.components);return o.a.createElement(i.Provider,{value:n},e.children)};var l="mdxType",s={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},b=Object(t.forwardRef)((function(e,n){var a=e.components,t=e.mdxType,i=e.originalType,c=e.parentName,l=function(e,n){var a={};for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&-1===n.indexOf(t)&&(a[t]=e[t]);return a}(e,["components","mdxType","originalType","parentName"]),b=r(a),p=t,d=b[c+"."+p]||b[p]||s[p]||i;return a?o.a.createElement(d,Object.assign({},{ref:n},l,{components:a})):o.a.createElement(d,Object.assign({},{ref:n},l))}));function p(e,n){var a=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var i=a.length,r=new Array(i);r[0]=b;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c[l]="string"==typeof e?e:t,r[1]=c;for(var p=2;p<i;p++)r[p]=a[p];return o.a.createElement.apply(null,r)}return o.a.createElement.apply(null,a)}b.displayName="MDXCreateElement"}}]);