(window.webpackJsonp=window.webpackJsonp||[]).push([[82],{153:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return s})),t.d(n,"metadata",(function(){return i})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return p}));var a=t(3),r=t(7),l=(t(0),t(255)),s={title:"Pulse",description:"Memory and lifetime analysis."},i={unversionedId:"checker-pulse",id:"version-1.1.0/checker-pulse",isDocsHomePage:!1,title:"Pulse",description:"Memory and lifetime analysis.",source:"@site/versioned_docs/version-1.1.0/checker-pulse.md",slug:"/checker-pulse",permalink:"/docs/checker-pulse",version:"1.1.0",sidebar:"version-1.1.0/docs",previous:{title:"`printf()` Argument Types",permalink:"/docs/checker-printf-args"},next:{title:"Purity",permalink:"/docs/checker-purity"}},c=[{value:"What is Infer:Pulse?",id:"what-is-inferpulse",children:[]},{value:"Pulse x Nullsafe",id:"pulse-x-nullsafe",children:[]},{value:"List of Issue Types",id:"list-of-issue-types",children:[]}],o={toc:c};function p(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(l.b)("wrapper",Object(a.a)({},o,t,{components:n,mdxType:"MDXLayout"}),Object(l.b)("p",null,"Memory and lifetime analysis."),Object(l.b)("p",null,"Activate with ",Object(l.b)("inlineCode",{parentName:"p"},"--pulse"),"."),Object(l.b)("p",null,"Supported languages:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"C/C++/ObjC: Yes"),Object(l.b)("li",{parentName:"ul"},"Java: Yes"),Object(l.b)("li",{parentName:"ul"},"C#/.Net: No")),Object(l.b)("h3",{id:"what-is-inferpulse"},"What is Infer:Pulse?"),Object(l.b)("p",null,"Pulse is an interprocedural memory safety analysis. Pulse can detect, for instance, ",Object(l.b)("a",{parentName:"p",href:"/docs/all-issue-types#nullptr_dereference"},"Null dereferences")," in Java. Errors are only reported when all conditions on the erroneous path are true regardless of input. Pulse should gradually replace the original ",Object(l.b)("a",{parentName:"p",href:"/docs/checker-biabduction"},"biabduction")," analysis of Infer. An example of a Null dereference found by Pulse is given below."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-java"},"class Person {\n    Person emergencyContact;\n    String address;\n\n    Person getEmergencyContact() {\n        return this.emergencyContact;\n    }\n}\n\nclass Registry {\n    void create() {\n        Person p = new Person();\n        Person c = p.getEmergencyContact();\n        // Null dereference here\n        System.out.println(c.address);\n    }\n\n    void printContact(Person p) {\n        // No null dereference, as we don't know anything about `p`\n        System.out.println(p.getEmergencyContact().address);\n    }\n}\n")),Object(l.b)("p",null,"How to run pulse for Java:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"infer run --pulse -- javac Test.java\n")),Object(l.b)("p",null,"Pulse reports a Null dereference on this file on ",Object(l.b)("inlineCode",{parentName:"p"},"create()"),", as it tries to access the field ",Object(l.b)("inlineCode",{parentName:"p"},"address")," of object ",Object(l.b)("inlineCode",{parentName:"p"},"c"),", and ",Object(l.b)("inlineCode",{parentName:"p"},"c")," has value ",Object(l.b)("inlineCode",{parentName:"p"},"null"),". In contrast, Pulse gives no report for ",Object(l.b)("inlineCode",{parentName:"p"},"printContact(Person p)"),", as we cannot be sure that ",Object(l.b)("inlineCode",{parentName:"p"},"p.getEmergencyContact()")," will return ",Object(l.b)("inlineCode",{parentName:"p"},"null"),". Pulse then labels this error as latent and only reports if there is a call to ",Object(l.b)("inlineCode",{parentName:"p"},"printContact(Person p)")," satisfying the condition for Null dereference."),Object(l.b)("h3",{id:"pulse-x-nullsafe"},"Pulse x Nullsafe"),Object(l.b)("p",null,Object(l.b)("a",{parentName:"p",href:"/docs/checker-eradicate"},"Nullsafe")," is a type checker for ",Object(l.b)("inlineCode",{parentName:"p"},"@Nullable")," annotations for Java. Classes following the Nullsafe discipline are annotated with ",Object(l.b)("inlineCode",{parentName:"p"},"@Nullsafe"),"."),Object(l.b)("p",null,"Consider the classes ",Object(l.b)("inlineCode",{parentName:"p"},"Person")," and ",Object(l.b)("inlineCode",{parentName:"p"},"Registry")," from the previous example. Assuming that class ",Object(l.b)("inlineCode",{parentName:"p"},"Person")," is annotated with ",Object(l.b)("inlineCode",{parentName:"p"},"@Nullsafe"),". In this case, we also annotate ",Object(l.b)("inlineCode",{parentName:"p"},"getEmergencyContact()")," with ",Object(l.b)("inlineCode",{parentName:"p"},"@Nullable"),", to make explicit that this method can return the ",Object(l.b)("inlineCode",{parentName:"p"},"null")," value. There is still the risk that classes depending on ",Object(l.b)("inlineCode",{parentName:"p"},"Person")," have Null dereferences. In this case, Pulse would report a Null dereference on ",Object(l.b)("inlineCode",{parentName:"p"},"Registry"),". It could also be the case that class ",Object(l.b)("inlineCode",{parentName:"p"},"Registry")," is annotated with ",Object(l.b)("inlineCode",{parentName:"p"},"@Nullsafe"),". By default Pulse reports on ",Object(l.b)("inlineCode",{parentName:"p"},"@Nullsafe")," files too, see the ",Object(l.b)("inlineCode",{parentName:"p"},"--pulse-nullsafe-report-npe")," option (Facebook-specific: Pulse does not report on ",Object(l.b)("inlineCode",{parentName:"p"},"@Nullsafe")," files)."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-java"},"@Nullsafe(Nullsafe.Mode.LOCAL)\nclass Person {\n    Person emergencyContact;\n    String address;\n\n    @Nullable Person getEmergencyContact() {\n        return this.emergencyContact;\n    }\n}\n\nclass Registry {\n    ... // Pulse reports here\n}\n")),Object(l.b)("h2",{id:"list-of-issue-types"},"List of Issue Types"),Object(l.b)("p",null,"The following issue types are reported by this checker:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"/docs/all-issue-types#constant_address_dereference"},"CONSTANT_ADDRESS_DEREFERENCE")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"/docs/all-issue-types#memory_leak"},"MEMORY_LEAK")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"/docs/all-issue-types#nil_messaging_to_non_pod"},"NIL_MESSAGING_TO_NON_POD")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"/docs/all-issue-types#nullptr_dereference"},"NULLPTR_DEREFERENCE")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"/docs/all-issue-types#optional_empty_access"},"OPTIONAL_EMPTY_ACCESS")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"/docs/all-issue-types#pulse_uninitialized_value"},"PULSE_UNINITIALIZED_VALUE")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"/docs/all-issue-types#stack_variable_address_escape"},"STACK_VARIABLE_ADDRESS_ESCAPE")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"/docs/all-issue-types#use_after_delete"},"USE_AFTER_DELETE")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"/docs/all-issue-types#use_after_free"},"USE_AFTER_FREE")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"/docs/all-issue-types#use_after_lifetime"},"USE_AFTER_LIFETIME")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{parentName:"li",href:"/docs/all-issue-types#vector_invalidation"},"VECTOR_INVALIDATION"))))}p.isMDXComponent=!0},255:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return f}));var a=t(0),r=t.n(a);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=r.a.createContext({}),p=function(e){var n=r.a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=p(e.components);return r.a.createElement(o.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},d=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,o=c(e,["components","mdxType","originalType","parentName"]),u=p(t),d=a,f=u["".concat(s,".").concat(d)]||u[d]||b[d]||l;return t?r.a.createElement(f,i(i({ref:n},o),{},{components:t})):r.a.createElement(f,i({ref:n},o))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,s=new Array(l);s[0]=d;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var o=2;o<l;o++)s[o]=t[o];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);