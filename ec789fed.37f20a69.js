(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{165:function(e,n,r){"use strict";r.r(n),r.d(n,"frontMatter",(function(){return o})),r.d(n,"rightToc",(function(){return i})),r.d(n,"metadata",(function(){return s})),r.d(n,"default",(function(){return u}));var t=r(1),a=r(9),c=(r(0),r(174)),o={id:"checkers",title:"Infer : AI"},i=[],s={id:"checkers",title:"Infer : AI",description:"Infer.AI is a collection of program analyses which range from simple checks to",source:"@site/docs/01-checkers.md",permalink:"/docs/checkers",sidebar:"docs",previous:{title:"Recommended flow for CI",permalink:"/docs/steps-for-ci"},next:{title:"Infer : Eradicate",permalink:"/docs/eradicate"}},l={rightToc:i,metadata:s},p="wrapper";function u(e){var n=e.components,r=Object(a.a)(e,["components"]);return Object(c.b)(p,Object(t.a)({},l,r,{components:n,mdxType:"MDXLayout"}),Object(c.b)("p",null,"Infer.AI is a collection of program analyses which range from simple checks to\nsophisticated inter-procedural analysis. Infer.AI is so named because it is\nbased on Abstract Interpretation."),Object(c.b)("p",null,"Current Infer.AI's which are in production include ThreadSafety,\nAnnotationReachability (e.g., can an allocation be reached from a\n@PerformanceCritical method), and\n",Object(c.b)("a",Object(t.a)({parentName:"p"},{href:"checkers-bug-types#CHECKERS_IMMUTABLE_CAST"}),"immutable cast")," for Java,\nas well as Static Initialization Order Fiasco for C++."),Object(c.b)("p",null,"The current checkers can be run by adding the option ",Object(c.b)("inlineCode",{parentName:"p"},"-a checkers")," to the\nanalysis command as in this example:"),Object(c.b)("pre",null,Object(c.b)("code",Object(t.a)({parentName:"pre"},{className:"language-bash"}),"infer run -a checkers -- javac Test.java\n")),Object(c.b)("p",null,"In addition, we are working on experimental AI's which target security\nproperties (Quandary) and buffer overruns (Inferbo). The infer commandline man\npage (",Object(c.b)("inlineCode",{parentName:"p"},"infer --help"),") explains how to run experimental AI's, or how to select\ncertain AI's and not others."))}u.isMDXComponent=!0},174:function(e,n,r){"use strict";r.d(n,"a",(function(){return i})),r.d(n,"b",(function(){return u}));var t=r(0),a=r.n(t),c=a.a.createContext({}),o=function(e){var n=a.a.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):Object.assign({},n,e)),r},i=function(e){var n=o(e.components);return a.a.createElement(c.Provider,{value:n},e.children)};var s="mdxType",l={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},p=Object(t.forwardRef)((function(e,n){var r=e.components,t=e.mdxType,c=e.originalType,i=e.parentName,s=function(e,n){var r={};for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&-1===n.indexOf(t)&&(r[t]=e[t]);return r}(e,["components","mdxType","originalType","parentName"]),p=o(r),u=t,d=p[i+"."+u]||p[u]||l[u]||c;return r?a.a.createElement(d,Object.assign({},{ref:n},s,{components:r})):a.a.createElement(d,Object.assign({},{ref:n},s))}));function u(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var c=r.length,o=new Array(c);o[0]=p;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[s]="string"==typeof e?e:t,o[1]=i;for(var u=2;u<c;u++)o[u]=r[u];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,r)}p.displayName="MDXCreateElement"}}]);